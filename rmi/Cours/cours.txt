Appel en retour. (Callback)

Probleme : en rmi tous les appels aux méthodes distantes sont synchrones.
(du fait de l'utilisation de sockets TCP).

Solution : L'utilisation de Callback

Principe : Le client appelle une méthode distante d'un objet serveur.
La méthode distante appelée termine rapidement pour pouvoir liberer le client.
Si le client souhaite le résultat il faut un objet coté client
pour que le serveur puisse lui indiquer la fin de la méthode et lui transmettre le résultat.

Etapes :
0 - Le client crée son objet distant "recepteur" doté d'une méthode "transmettre". 
1 - Le client appel la méthode "calcul" de l'objet serveur en mettant en parametre la référence de l'objet "recepteur".
2 - Dans la méthode "calcul", création d'un thread "start" chargé d'effectuer le vrai calcul.
3 - Fin de la méthode "calcul" ce qui libère le client.
4 - Le thread effectue le calcul.
5 - Le thread envoie le résultat en appelant la méthode "transmettre" sur "recepteur" coté client.
6 - Fin de la méthode transmettre, fin du thread.




Un systeme répartie, réseau d'entités calculantes ayant poour but d'effecctuer une tache globale
à laquelle chacune participe par ses calculs et sa comunication.

Représentation par un graph dont les noeux/sites/processus sont les entités,
les arcs/arretes du graph sont les liens de communication unidirectionels/bidirectionels.

Les sites peuvent etre annonimes (les sites ne se connaissent pas etre eux), dans se cas là,
les sommets du graph ne sont pas nommés
Non annonimes : identifiant des sites possedent une relation d'ordre. (ent general, des entiers ou des string)

Unnicité du code ? chaque site execute le même code, il sont à la fois client et serveur. (On parle de système uniforme.)

S'il n'y a qu'un seul site avec un code different des autres on parle de système semi-uniforme.

Système synchrone : Dans un système synchrone, le fonctionnement globale est organisé par phases,
à la fin de chaque phase, les sites s'attendent avant de passer à la phase suivante.

Les canaux de communication peuvent être Fisrt In, Fisrt Out (FIFO) ou non

Remarque : ce sont les communications qui apporte de la synchronisation dans les systemes asynchrones.


Dans notre cas : systemes non-anonymes.
                 systemes bidirectionels
                 systèmes uniformes
                 systemes asynchrones
                 communications synchrones (TCP)
                 communications FIFO

Algo répartie

critères d'efficassité
    complexité en temps
    complexité en espace
    complexité en messages

Stratégie générale :
    Contrainte sur la topologie du réseau. (anneaux, arbre,...)
        => Contrainte sur la propagation des messages.
    Contrainte en introduisant un ordre des événements (émission d'un message, reception, calcul local)
        Grace à cet ordre, on peut comparer deux evenements se produisant sur des sites differents.
        On définit des horloge logiques. (horloge entière appellées aussi horloge de Lamport)


Horloge de lamport :

    